#!/usr/bin/env bash
#
# When an alias just won't cut it
# Functions are aliased so I can easily tell what they are

# Display a search on https://wiki.archlinux.org
_func_archwiki () {
  local term="${*}"
  term="${term// /+}"
  lynx "https://wiki.archlinux.org/index.php?search=${term}"
}
alias archwiki="_func_archwiki"

# Display cheatsheets using https://cheat.sh
_func_cheat () {
  local term="${*}"
  term="${term// /+}"
  curl "cheat.sh/${term}"
  # display any matching personal cheatsheets
  [ -f ~/cheatsheets/"$term" ] && cat ~/cheatsheets/"$term"
}
alias cheat="_func_cheat"

# List files by size. Usage: dusort dir/*
_func_dusort () { du -sh "$@" | sort -sh; }
alias dusort='_func_dusort'

# Extract files, as suggested in Mendel Cooper's "Advanced Bash Scripting Guide"
_func_extract () {
   if [ -f "$1" ] ; then
       case $1 in
        *.tar.bz2)      tar xvjf "$1" ;;
        *.tar.gz)       tar xvzf "$1" ;;
        *.tar.xz)       tar Jxvf "$1" ;;
        *.bz2)          bunzip2 "$1" ;;
        *.rar)          unrar x "$1" ;;
        *.gz)           gunzip "$1" ;;
        *.tar)          tar xvf "$1" ;;
        *.tbz2)         tar xvjf "$1" ;;
        *.tgz)          tar xvzf "$1" ;;
        *.zip)          unzip "$1" ;;
        *.Z)            uncompress "$1" ;;
        *.7z)           7z x "$1" ;;
        *)              echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
}
alias extract="_func_extract"

# Open a given dir or file's location in Forklift (https://binarynights.com)
_func_forklift () { open "$1" -a "Forklift"; }
alias forklift="_func_forklift"

# Generate a gitignore file using https://www.toptal.com/developers/gitignore
_func_generategitignore () {
  local langs="${*}"
  local tmpfile
  tmpfile=$(mktemp)
  langs="${langs// /,}"
  curl -sL "https://www.toptal.com/developers/gitignore/api/$langs" > "$tmpfile"
  cp -i "$tmpfile" .gitignore
  rm "$tmpfile"
}
alias generategitignore="_func_generategitignore"

# Open the git remote URL in the default browser
_func_gitremoteopen () {
  # Determine method to open browser
  local open
  [[ $(uname) == "Darwin"* ]] && open=open || open=xdg-open
  if git config --get remote.origin.url | grep -q "@"; then
    # for SSH cloned repos
    $open "$(git config --get remote.origin.url \
      | awk -F "@" '{print $2}' \
      | sed 's/:/\//g' \
      | awk '{print "https://"$1}')"
  else
    # for HTTPS cloned repos
    $open "$(git config --get remote.origin.url)"
  fi
}
alias gitremoteopen="_func_gitremoteopen"

# Create a dir and move into it
_func_mkcd () { mkdir "$1" && cd "$1" || exit; }
alias mkcd="_func_mkcd"

# Open a dir in a new tab
_func_newtab () { open "$@" -a "iterm"; }
alias newtab="_func_newtab"

# Upgrade to the latest version of Chromedriver
_func_upgradechromedriver () {
  wget -O /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/"$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)"/chromedriver_mac64.zip \
    && unzip /tmp/chromedriver.zip chromedriver -d ~/bin \
    && rm /tmp/chromedriver.zip
}
alias upgradechromedriver="_func_upgradechromedriver"
